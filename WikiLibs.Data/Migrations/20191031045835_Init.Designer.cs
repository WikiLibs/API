// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WikiLibs.Data;

namespace WikiLibs.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20191031045835_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WikiLibs.Data.Models.ApiKey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<int>("Flags");

                    b.Property<string>("Origin");

                    b.Property<int>("UseNum");

                    b.HasKey("Id");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Examples.Example", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<long?>("RequestId");

                    b.Property<long>("SymbolId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.HasIndex("UserId");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Examples.ExampleCodeLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("Data");

                    b.Property<long>("ExampleId");

                    b.HasKey("Id");

                    b.HasIndex("ExampleId");

                    b.ToTable("ExampleCodeLines");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Examples.ExampleRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ApplyToId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long?>("DataId");

                    b.Property<string>("Message");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApplyToId");

                    b.HasIndex("DataId")
                        .IsUnique()
                        .HasFilter("[DataId] IS NOT NULL");

                    b.ToTable("ExampleRequests");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupId");

                    b.Property<string>("Perm");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Import", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SymbolImports");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Lang", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<byte[]>("Icon");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SymbolLangs");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Lib", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SymbolLibs");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Prototype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<long>("SymbolId");

                    b.HasKey("Id");

                    b.HasIndex("SymbolId");

                    b.ToTable("Prototypes");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.PrototypeParam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data");

                    b.Property<string>("Description");

                    b.Property<long>("PrototypeId");

                    b.HasKey("Id");

                    b.HasIndex("PrototypeId");

                    b.ToTable("PrototypeParams");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.PrototypeParamSymbolRef", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PrototypeParamId");

                    b.Property<long?>("RefId");

                    b.Property<string>("RefPath");

                    b.HasKey("Id");

                    b.HasIndex("PrototypeParamId")
                        .IsUnique();

                    b.HasIndex("RefId");

                    b.ToTable("PrototypeParamSymbolRefs");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Symbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<long?>("ImportId");

                    b.Property<long>("LangId");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<long>("LibId");

                    b.Property<string>("Path");

                    b.Property<long>("TypeId");

                    b.Property<string>("UserId");

                    b.Property<long>("Views");

                    b.HasKey("Id");

                    b.HasIndex("ImportId");

                    b.HasIndex("LangId");

                    b.HasIndex("LibId");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasFilter("[Path] IS NOT NULL");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.SymbolRef", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("RefId");

                    b.Property<string>("RefPath");

                    b.Property<long>("SymbolId");

                    b.HasKey("Id");

                    b.HasIndex("RefId");

                    b.HasIndex("SymbolId");

                    b.ToTable("SymbolRefs");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Type", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("SymbolTypes");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Confirmation");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<long?>("GroupId");

                    b.Property<byte[]>("Icon");

                    b.Property<bool>("IsBot");

                    b.Property<string>("LastName");

                    b.Property<string>("Pass");

                    b.Property<int>("Points");

                    b.Property<bool>("Private");

                    b.Property<string>("ProfileMsg");

                    b.Property<string>("Pseudo");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Examples.Example", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Symbols.Symbol", "Symbol")
                        .WithMany("Examples")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikiLibs.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Examples.ExampleCodeLine", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Examples.Example", "Example")
                        .WithMany("Code")
                        .HasForeignKey("ExampleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Examples.ExampleRequest", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Examples.Example", "ApplyTo")
                        .WithMany()
                        .HasForeignKey("ApplyToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WikiLibs.Data.Models.Examples.Example", "Data")
                        .WithOne("Request")
                        .HasForeignKey("WikiLibs.Data.Models.Examples.ExampleRequest", "DataId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Permission", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Group", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Prototype", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Symbols.Symbol", "Symbol")
                        .WithMany("Prototypes")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.PrototypeParam", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Symbols.Prototype", "Prototype")
                        .WithMany("Parameters")
                        .HasForeignKey("PrototypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.PrototypeParamSymbolRef", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Symbols.PrototypeParam", "PrototypeParam")
                        .WithOne("SymbolRef")
                        .HasForeignKey("WikiLibs.Data.Models.Symbols.PrototypeParamSymbolRef", "PrototypeParamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikiLibs.Data.Models.Symbols.Symbol", "Ref")
                        .WithOne()
                        .HasForeignKey("WikiLibs.Data.Models.Symbols.PrototypeParamSymbolRef", "RefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.Symbol", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Symbols.Import", "Import")
                        .WithMany()
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WikiLibs.Data.Models.Symbols.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikiLibs.Data.Models.Symbols.Lib", "Lib")
                        .WithMany()
                        .HasForeignKey("LibId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikiLibs.Data.Models.Symbols.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WikiLibs.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.Symbols.SymbolRef", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Symbols.Symbol", "Ref")
                        .WithOne()
                        .HasForeignKey("WikiLibs.Data.Models.Symbols.SymbolRef", "RefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WikiLibs.Data.Models.Symbols.Symbol", "Symbol")
                        .WithMany("Symbols")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WikiLibs.Data.Models.User", b =>
                {
                    b.HasOne("WikiLibs.Data.Models.Group", "Group")
                        .WithOne()
                        .HasForeignKey("WikiLibs.Data.Models.User", "GroupId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
